DAY 1 : 1 NOV

# SELECT : The SELECT statement is used to select data from a database.

       Syntax: 
              SELECT column1, column2, ...
              FROM table_name;

# SELECT DISTINCT : The statement is used to return only distinct (different) values.

       Syntax:
              SELECT DISTINCT column1, column2, ...
              FROM table_name;

# WHERE : The WHERE clause is used to filter records.

       Syntax:
              SELECT column1, column2, ...
              FROM table_name
              WHERE condition;

# ORDER BY : The ORDER BY keyword is used to sort the result-set in ascending or descending order.

       Syntax:
              SELECT column1, column2, ...
              FROM table_name
              ORDER BY column1, column2, ... ASC|DESC;

# AND : The WHERE clause can contain one or many AND operators.
- The AND operator is used to filter records based on more than one condition

       Syntax:
              SELECT column1, column2, ...
              FROM table_name
              WHERE condition1 AND condition2 AND condition3 ...;

##Note: Combining AND and OR
- You can combine the AND and OR operators.
- The following SQL statement selects all customers from Spain that starts with a "G" or an "R".
- Make sure you use parenthesis to get the correct result.
- Example: Select all Spanish customers that starts with either "G" or "R":
              
              SELECT * FROM Customers
              WHERE Country = 'Spain' AND (CustomerName LIKE 'G%' OR CustomerName LIKE 'R%');

# OR Operator : The WHERE clause can contain one or more OR operators.
- The OR operator is used to filter records based on more than one condition

       Syntax:
              SELECT column1, column2, ...
              FROM table_name
              WHERE condition1 OR condition2 OR condition3 ...;

# NOT Operator : The NOT operator is used in combination with other operators to give the opposite result, also called the negative result.

       Syntax:
              SELECT column1, column2, ...
              FROM table_name
              WHERE NOT condition;
- In the select statement below we want to return all customers that are NOT from Spain:
- ExampleGet your own SQL Server : Select only the customers that are NOT from Spain:
              SELECT * FROM Customers
              WHERE NOT Country = 'Spain';
In the example above, the NOT operator is used in combination with the = operator, but it can be used in combination with other comparison and/or logical operators. See examples below.

## NOT LIKE
Example: Select customers that does not start with the letter 'A':          
              SELECT * FROM Customers
              WHERE CustomerName NOT LIKE 'A%';

## NOT BETWEEN
Example : Select customers with a customerID not between 10 and 60:
              SELECT * FROM Customers
              WHERE CustomerID NOT BETWEEN 10 AND 60;

## NOT IN
Example : Select customers that are not from Paris or London:
              SELECT * FROM Customers
              WHERE City NOT IN ('Paris', 'London');

## NOT Greater Than
Example : Select customers with a CustomerId not greater than 50:
              SELECT * FROM Customers
              WHERE NOT CustomerID > 50;
Note: There is a not-greater-then operator: !> that would give you the same result.

## NOT Less Than
Example : Select customers with a CustomerID not less than 50:
              SELECT * FROM Customers
              WHERE NOT CustomerId < 50;
Note: There is a not-less-then operator: !< that would give you the same result.

# INSERT INTO : The INSERT INTO statement is used to insert new records in a table.

- INSERT INTO Syntax: It is possible to write the INSERT INTO statement in two ways:

1. Specify both the column names and the values to be inserted:

              INSERT INTO table_name (column1, column2, column3, ...)
              VALUES (value1, value2, value3, ...);

2. If you are adding values for all the columns of the table, you do not need to specify the column names in the SQL query. However, make sure the order of the values is in the same order as the columns in the table. Here, the INSERT INTO syntax would be as follows:

              INSERT INTO table_name
              VALUES (value1, value2, value3, ...);

# NULL Value : A field with a NULL value is a field with no value.

- If a field in a table is optional, it is possible to insert a new record or update a record without adding a value to this field. Then, the field will be saved with a NULL value.
Note: A NULL value is different from a zero value or a field that contains spaces. A field with a NULL value is one that has been left blank during record creation!

+ How to Test for NULL Values?
- It is not possible to test for NULL values with comparison operators, such as =, <, or <>.
- We will have to use the IS NULL and IS NOT NULL operators instead.
- IS NULL Syntax
              SELECT column_names
              FROM table_name
              WHERE column_name IS NULL;

- IS NOT NULL Syntax
              SELECT column_names
              FROM table_name
              WHERE column_name IS NOT NULL;

# UPDATE : The UPDATE statement is used to modify the existing records in a table.

- UPDATE Syntax
              UPDATE table_name
              SET column1 = value1, column2 = value2, ...
              WHERE condition;

Note: Be careful when updating records in a table! Notice the WHERE clause in the UPDATE statement. The WHERE clause specifies which record(s) that should be updated. If you omit the WHERE clause, all records in the table will be updated!

# DELETE : The DELETE statement is used to delete existing records in a table.

- DELETE Syntax
              DELETE FROM table_name WHERE condition;

+ Delete All Records
- It is possible to delete all rows in a table without deleting the table. This means that the table structure, attributes, and indexes will be intact:
              DELETE FROM table_name;
+Delete a Table
- To delete the table completely, use the DROP TABLE statement:
- Example: Remove the Customers table:
              DROP TABLE Customers;
Note: Be careful when deleting records in a table! Notice the WHERE clause in the DELETE statement. The WHERE clause specifies which record(s) should be deleted. If you omit the WHERE clause, all records in the table will be deleted!

# 


♻️ Still in Progress...
