DAY 1 : 1 NOV

# SELECT : The SELECT statement is used to select data from a database.

       Syntax: 
              SELECT column1, column2, ...
              FROM table_name;

# SELECT DISTINCT : The statement is used to return only distinct (different) values.

       Syntax:
              SELECT DISTINCT column1, column2, ...
              FROM table_name;

# WHERE : The WHERE clause is used to filter records.

       Syntax:
              SELECT column1, column2, ...
              FROM table_name
              WHERE condition;

# ORDER BY : The ORDER BY keyword is used to sort the result-set in ascending or descending order.

       Syntax:
              SELECT column1, column2, ...
              FROM table_name
              ORDER BY column1, column2, ... ASC|DESC;

# AND : The WHERE clause can contain one or many AND operators.
- The AND operator is used to filter records based on more than one condition

       Syntax:
              SELECT column1, column2, ...
              FROM table_name
              WHERE condition1 AND condition2 AND condition3 ...;

##Note: Combining AND and OR
- You can combine the AND and OR operators.
- The following SQL statement selects all customers from Spain that starts with a "G" or an "R".
- Make sure you use parenthesis to get the correct result.
- Example: Select all Spanish customers that starts with either "G" or "R":
              
              SELECT * FROM Customers
              WHERE Country = 'Spain' AND (CustomerName LIKE 'G%' OR CustomerName LIKE 'R%');

# OR Operator : The WHERE clause can contain one or more OR operators.
- The OR operator is used to filter records based on more than one condition

       Syntax:
              SELECT column1, column2, ...
              FROM table_name
              WHERE condition1 OR condition2 OR condition3 ...;

# NOT Operator : The NOT operator is used in combination with other operators to give the opposite result, also called the negative result.

       Syntax:
              SELECT column1, column2, ...
              FROM table_name
              WHERE NOT condition;
- In the select statement below we want to return all customers that are NOT from Spain:
- ExampleGet your own SQL Server : Select only the customers that are NOT from Spain:
              SELECT * FROM Customers
              WHERE NOT Country = 'Spain';
In the example above, the NOT operator is used in combination with the = operator, but it can be used in combination with other comparison and/or logical operators. See examples below.

## NOT LIKE
Example: Select customers that does not start with the letter 'A':          
              SELECT * FROM Customers
              WHERE CustomerName NOT LIKE 'A%';

## NOT BETWEEN
Example : Select customers with a customerID not between 10 and 60:
              SELECT * FROM Customers
              WHERE CustomerID NOT BETWEEN 10 AND 60;

## NOT IN
Example : Select customers that are not from Paris or London:
              SELECT * FROM Customers
              WHERE City NOT IN ('Paris', 'London');

## NOT Greater Than
Example : Select customers with a CustomerId not greater than 50:
              SELECT * FROM Customers
              WHERE NOT CustomerID > 50;
Note: There is a not-greater-then operator: !> that would give you the same result.

## NOT Less Than
Example : Select customers with a CustomerID not less than 50:
              SELECT * FROM Customers
              WHERE NOT CustomerId < 50;
Note: There is a not-less-then operator: !< that would give you the same result.

# INSERT INTO : The INSERT INTO statement is used to insert new records in a table.

- INSERT INTO Syntax: It is possible to write the INSERT INTO statement in two ways:

1. Specify both the column names and the values to be inserted:

              INSERT INTO table_name (column1, column2, column3, ...)
              VALUES (value1, value2, value3, ...);

2. If you are adding values for all the columns of the table, you do not need to specify the column names in the SQL query. However, make sure the order of the values is in the same order as the columns in the table. Here, the INSERT INTO syntax would be as follows:

              INSERT INTO table_name
              VALUES (value1, value2, value3, ...);

# NULL Value : A field with a NULL value is a field with no value.

- If a field in a table is optional, it is possible to insert a new record or update a record without adding a value to this field. Then, the field will be saved with a NULL value.
Note: A NULL value is different from a zero value or a field that contains spaces. A field with a NULL value is one that has been left blank during record creation!

+ How to Test for NULL Values?
- It is not possible to test for NULL values with comparison operators, such as =, <, or <>.
- We will have to use the IS NULL and IS NOT NULL operators instead.
- IS NULL Syntax
              SELECT column_names
              FROM table_name
              WHERE column_name IS NULL;

- IS NOT NULL Syntax
              SELECT column_names
              FROM table_name
              WHERE column_name IS NOT NULL;

# UPDATE : The UPDATE statement is used to modify the existing records in a table.

- UPDATE Syntax
              UPDATE table_name
              SET column1 = value1, column2 = value2, ...
              WHERE condition;

Note: Be careful when updating records in a table! Notice the WHERE clause in the UPDATE statement. The WHERE clause specifies which record(s) that should be updated. If you omit the WHERE clause, all records in the table will be updated!

# DELETE : The DELETE statement is used to delete existing records in a table.

- DELETE Syntax
              DELETE FROM table_name WHERE condition;

+ Delete All Records
- It is possible to delete all rows in a table without deleting the table. This means that the table structure, attributes, and indexes will be intact:
              DELETE FROM table_name;
+Delete a Table
- To delete the table completely, use the DROP TABLE statement:
- Example: Remove the Customers table:
              DROP TABLE Customers;
Note: Be careful when deleting records in a table! Notice the WHERE clause in the DELETE statement. The WHERE clause specifies which record(s) should be deleted. If you omit the WHERE clause, all records in the table will be deleted!

# SELECT TOP : Used to specify the number of records to return.
- The SELECT TOP clause is useful on large tables with thousands of records. Returning a large number of records can impact performance.

Note: Not all database systems support the SELECT TOP clause. MySQL supports the LIMIT clause to select a limited number of records, while Oracle uses FETCH FIRST n ROWS ONLY and ROWNUM.

- SQL Server / MS Access Syntax:

              SELECT TOP number|percent column_name(s)
              FROM table_name
              WHERE condition;

- MySQL Syntax:

              SELECT column_name(s)
              FROM table_name
              WHERE condition
              LIMIT number;

- Oracle 12 Syntax:

              SELECT column_name(s)
              FROM table_name
              ORDER BY column_name(s)
              FETCH FIRST number ROWS ONLY;

- Older Oracle Syntax:

              SELECT column_name(s)
              FROM table_name
              WHERE ROWNUM <= number;

- Older Oracle Syntax (with ORDER BY):

              SELECT *
              FROM (SELECT column_name(s) FROM table_name ORDER BY column_name(s))
              WHERE ROWNUM <= number;


# MIN() and MAX() Functions:

- The MIN() function returns the smallest value of the selected column.
- The MAX() function returns the largest value of the selected column.

- Syntax
              SELECT MIN(column_name)
              FROM table_name
              WHERE condition;
              
              SELECT MAX(column_name)
              FROM table_name
              WHERE condition; 

Day 5

# COUNT() Function:  returns the number of rows that matches a specified criterion.

- Syntax
              SELECT COUNT(column_name)
              FROM table_name
              WHERE condition;

# SUM() Function : returns the total sum of a numeric column.

- Syntax
              SELECT SUM(column_name)
              FROM table_name
              WHERE condition;

- Add a Where Clause to specify conditions:
       Example
       Return the number of orders made for the product with ProductID 11:

              SELECT SUM(Quantity)
              FROM OrderDetails
              WHERE ProdictId = 11;
- Use an Alias : Give the summarized column a name by using the AS keyword.
       Example
       Name the column "total":

              SELECT SUM(Quantity) AS total
              FROM OrderDetails;

- SUM() With an Expression : The parameter inside the SUM() function can also be an expression.
If we assume that each product in the OrderDetails column costs 10 dollars, we can find the total earnings in dollars by multiply each quantity with 10:
       Example
       Use an expression inside the SUM() parenthesis:

              SELECT SUM(Quantity * 10)
              FROM OrderDetails;

# AVG() Function : returns the average value of a numeric column.
Note: NULL values are ignored.

Syntax
              SELECT AVG(column_name)
              FROM table_name
              WHERE condition;

- Add a Where Clause
Return the average price of products in category 1:
              SELECT AVG(Price)
              FROM Products
              WHERE CategoryID = 1;
- Use an Alias: Give the AVG column a name by using the AS keyword.

Example
Name the column "average price":
              SELECT AVG(Price) AS [average price]
              FROM Products;

- Higher Than Average
To list all records with a higher price than average, we can use the AVG() function in a sub query:
Example
Return all products with a higher price than the average price:

              SELECT * FROM Products
              WHERE price > (SELECT AVG(price) FROM Products);

# LIKE Operator: is used in a WHERE clause to search for a specified pattern in a column.

- There are two wildcards often used in conjunction with the LIKE operator:
        - The percent sign % represents zero, one, or multiple characters
        - The underscore sign _ represents one, single character

- Syntax
              SELECT column1, column2, ...
              FROM table_name
              WHERE columnn LIKE pattern;

+ The _ wildcard represents a single character.
       - It can be any character or number, but each _ represents one, and only one, character.
       - Example
          Return all customers from a city that starts with 'L' followed by one wildcard character, then 'nd' and then two wildcard characters:

                     SELECT * FROM Customers
                     WHERE city LIKE 'L_nd__';
                     
+ The % wildcard represents any number of characters, even zero characters.

       - Example
          Return all customers from a city that contains the letter 'L':

                     SELECT * FROM Customers
                     WHERE city LIKE '%L%';
+ Starts With
       - To return records that starts with a specific letter or phrase, add the % at the end of the letter or phrase.
       - Example
         Return all customers that starts with 'La':

                     SELECT * FROM Customers
                     WHERE CustomerName LIKE 'La%';
       - Tip: You can also combine any number of conditions using AND or OR operators.

              - Example
                     Return all customers that starts with 'a' or starts with 'b':

                     SELECT * FROM Customers
                     WHERE CustomerName LIKE 'a%' OR CustomerName LIKE 'b%';

+ Ends With
       - To return records that ends with a specific letter or phrase, add the % at the beginning of the letter or phrase.
       - Example
              Return all customers that ends with 'a':

                     SELECT * FROM Customers
                     WHERE CustomerName LIKE '%a';
       - Tip: You can also combine "starts with" and "ends with":
              -Example
                 Return all customers that starts with "b" and ends with "s":

                     SELECT * FROM Customers
                     WHERE CustomerName LIKE 'b%s';

+ Contains
       - To return records that contains a specific letter or phrase, add the % both before and after the letter or phrase.
       - Example
          Return all customers that contains the phrase 'or'

                     SELECT * FROM Customers
                     WHERE CustomerName LIKE '%or%';

+ Combine Wildcards
       - Any wildcard, like % and _ , can be used in combination with other wildcards.
       - Example
          Return all customers that starts with "a" and are at least 3 characters in length:

                     SELECT * FROM Customers
                     WHERE CustomerName LIKE 'a__%';
       - Example
         Return all customers that have "r" in the second position:

                     SELECT * FROM Customers
                     WHERE CustomerName LIKE '_r%';

+ Without Wildcard
       - If no wildcard is specified, the phrase has to have an exact match to return a result.
       - Example
          Return all customers from Spain:

                     SELECT * FROM Customers
                     WHERE Country LIKE 'Spain';

# 






♻️ Still in Progress...
